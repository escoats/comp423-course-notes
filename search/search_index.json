{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Lizzie's Course Notes!","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a Dev Container for Rust","text":"<ul> <li>Primary author: Lizzie Coats</li> <li>Reviewer: Caroline Bryan</li> <li>Adapted from COMP 423: Starting a Static Website Project with MKDocs</li> </ul> <p>This tutorial will walk you through creating a dev container for programming in Rust, including how to create and connect a new repository!</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before getting started, make sure you've done the following:  </p> <ul> <li>Create a Github Account</li> <li>Install VSCode</li> <li>Install Git</li> <li>Install Docker Desktop</li> </ul>"},{"location":"tutorials/rust-setup/#setup-create-a-repository","title":"Setup: Create a Repository \ud83d\udea7 \ud83d\ude9c","text":""},{"location":"tutorials/rust-setup/#1-create-local-directory-and-initialize-git","title":"1. Create Local Directory and Initialize Git","text":"<p>In your terminal, create a new directory for your project: </p> <pre><code>mkdir rust-project\ncd rust-project\n</code></pre> Note <p><code>mkdir</code> creates a new directory and <code>cd</code> navigates into it!</p> <p>Initialize a new Git repository: <pre><code>git init\n</code></pre> Finally, create a README file and commit it to your repository: <pre><code>echo \"# Rust Project\" &gt; README.md\ngit add .\ngit commit -m \"Add README\"\n</code></pre></p> Note <p><code>echo \"text\" &gt; README.md</code> writes the text output by <code>echo</code> into the file. Put whatever you want inside the quotes (but make it descriptive)!</p>"},{"location":"tutorials/rust-setup/#2-create-remote-repository","title":"2. Create Remote Repository","text":"<p>On GitHub, create a new repository:</p> <ul> <li>Name: <code>rust-project</code></li> <li>Description: \"My rust project!\"</li> </ul> <p>Do not initialize the repository with a README - we already created one locally!</p>"},{"location":"tutorials/rust-setup/#3-link-local-repository-to-github","title":"3. Link Local Repository to GitHub","text":"<p>In your project directory, add the GitHub repository as a remote: <pre><code>git remote add origin https://github.com/&lt;username&gt;/rust-project.git\n</code></pre></p> <p>Push your first commit to the remote repository: <pre><code>git push -u origin main\n</code></pre></p> Note <p>The -u flag creates a tracking relationship between the main branch in your local repository and the one in your remote repository. The full length of this flag is <code>--set-upstream</code>.</p>"},{"location":"tutorials/rust-setup/#configure-dev-container","title":"Configure Dev Container \ud83d\udc33 \ud83d\udea2","text":""},{"location":"tutorials/rust-setup/#1-add-dev-container-configuration","title":"1. Add Dev Container Configuration","text":"<p>Open your <code>rust-project</code> directory in VSCode.  Install the Dev Containers extension for VSCode. Create a <code>.devcontainer</code> directory in the root of your project. Inside, create a file called <code>devcontainer.json</code>.</p> <p>The <code>devcontainer.json</code> file contains the configuration for your development environment: </p> <pre><code>{\n  \"name\": \"My Rust Project\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#2-reopen-project-in-dev-container","title":"2. Reopen Project in Dev Container","text":"<p>In the VSCode command palette (<code>Ctrl+Shift+P</code>), type \"Dev Containers: Reopen in Container.\"</p> <p>Make sure your dev container is running a recent version of Rust with <code>rustc --version</code> </p> Note <p>The most recent version of Rust currently available is 1.84.0.</p>"},{"location":"tutorials/rust-setup/#hello-world","title":"Hello World! \ud83d\udc4b \ud83c\udf0e","text":"<ol> <li>To create a binary project, run <code>cargo new &lt;project-name&gt; --vcs none</code>. <pre><code>cargo new hello-world --vcs none\n</code></pre></li> </ol> Note <p>The <code>--vcs none</code> flag blocks the creation of another repository.</p> <ol> <li> <p>cd into your new package: <code>cd hello-world</code>.  </p> </li> <li> <p>Edit your <code>main.rs</code> file to contain the following: <pre><code>fn main() {\n    println!(\"Hello COMP423!\");\n}\n</code></pre></p> </li> <li> <p>Build your file with <code>cargo build</code>. This command compiles your human-readable program (Rust code) and links any necessary dependencies, turning them into an executable file (binary).  </p> </li> <li> <p>Run your program with <code>cargo run</code>. This command runs the file created in the previous step! Your output should be: <pre><code>Hello COMP423!\n</code></pre></p> </li> </ol> Note <p>If you've made any changes to your program after running <code>cargo build</code>, <code>cargo run</code> will re-compile and run the program in the same step!</p> <p>If your output matches, you've successfully set up a dev container for Rust. Congratulations!\ud83c\udf89</p>"}]}